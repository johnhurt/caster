// This file is generated. Do not edit
// @generated

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct CasterNodeConfig {
    // message fields
    seed: ::std::option::Option<bool>,
    remote_seed: ::std::option::Option<bool>,
    peer_address: ::protobuf::SingularPtrField<super::ServiceAddress>,
    chatter_port: ::std::option::Option<i32>,
    internal_interface: ::protobuf::SingularField<::std::string::String>,
    external_interface: ::protobuf::SingularField<::std::string::String>,
    remote_interface: ::protobuf::SingularField<::std::string::String>,
    owned_port: ::std::vec::Vec<i32>,
    storage_directories: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl CasterNodeConfig {
    pub fn new() -> CasterNodeConfig {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static CasterNodeConfig {
        static mut instance: ::protobuf::lazy::Lazy<CasterNodeConfig> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CasterNodeConfig,
        };
        unsafe {
            instance.get(|| {
                CasterNodeConfig {
                    seed: ::std::option::Option::None,
                    remote_seed: ::std::option::Option::None,
                    peer_address: ::protobuf::SingularPtrField::none(),
                    chatter_port: ::std::option::Option::None,
                    internal_interface: ::protobuf::SingularField::none(),
                    external_interface: ::protobuf::SingularField::none(),
                    remote_interface: ::protobuf::SingularField::none(),
                    owned_port: ::std::vec::Vec::new(),
                    storage_directories: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required bool seed = 1;

    pub fn clear_seed(&mut self) {
        self.seed = ::std::option::Option::None;
    }

    pub fn has_seed(&self) -> bool {
        self.seed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seed(&mut self, v: bool) {
        self.seed = ::std::option::Option::Some(v);
    }

    pub fn get_seed<'a>(&self) -> bool {
        self.seed.unwrap_or(false)
    }

    // required bool remote_seed = 2;

    pub fn clear_remote_seed(&mut self) {
        self.remote_seed = ::std::option::Option::None;
    }

    pub fn has_remote_seed(&self) -> bool {
        self.remote_seed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remote_seed(&mut self, v: bool) {
        self.remote_seed = ::std::option::Option::Some(v);
    }

    pub fn get_remote_seed<'a>(&self) -> bool {
        self.remote_seed.unwrap_or(false)
    }

    // required .ServiceAddress peer_address = 3;

    pub fn clear_peer_address(&mut self) {
        self.peer_address.clear();
    }

    pub fn has_peer_address(&self) -> bool {
        self.peer_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer_address(&mut self, v: super::ServiceAddress) {
        self.peer_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_address<'a>(&'a mut self) -> &'a mut super::ServiceAddress {
        if self.peer_address.is_none() {
            self.peer_address.set_default();
        };
        self.peer_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_peer_address(&mut self) -> super::ServiceAddress {
        self.peer_address.take().unwrap_or_else(|| super::ServiceAddress::new())
    }

    pub fn get_peer_address<'a>(&'a self) -> &'a super::ServiceAddress {
        self.peer_address.as_ref().unwrap_or_else(|| super::ServiceAddress::default_instance())
    }

    // required int32 chatter_port = 4;

    pub fn clear_chatter_port(&mut self) {
        self.chatter_port = ::std::option::Option::None;
    }

    pub fn has_chatter_port(&self) -> bool {
        self.chatter_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chatter_port(&mut self, v: i32) {
        self.chatter_port = ::std::option::Option::Some(v);
    }

    pub fn get_chatter_port<'a>(&self) -> i32 {
        self.chatter_port.unwrap_or(0)
    }

    // required string internal_interface = 5;

    pub fn clear_internal_interface(&mut self) {
        self.internal_interface.clear();
    }

    pub fn has_internal_interface(&self) -> bool {
        self.internal_interface.is_some()
    }

    // Param is passed by value, moved
    pub fn set_internal_interface(&mut self, v: ::std::string::String) {
        self.internal_interface = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_internal_interface<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.internal_interface.is_none() {
            self.internal_interface.set_default();
        };
        self.internal_interface.as_mut().unwrap()
    }

    // Take field
    pub fn take_internal_interface(&mut self) -> ::std::string::String {
        self.internal_interface.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_internal_interface<'a>(&'a self) -> &'a str {
        match self.internal_interface.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required string external_interface = 6;

    pub fn clear_external_interface(&mut self) {
        self.external_interface.clear();
    }

    pub fn has_external_interface(&self) -> bool {
        self.external_interface.is_some()
    }

    // Param is passed by value, moved
    pub fn set_external_interface(&mut self, v: ::std::string::String) {
        self.external_interface = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external_interface<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.external_interface.is_none() {
            self.external_interface.set_default();
        };
        self.external_interface.as_mut().unwrap()
    }

    // Take field
    pub fn take_external_interface(&mut self) -> ::std::string::String {
        self.external_interface.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_external_interface<'a>(&'a self) -> &'a str {
        match self.external_interface.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required string remote_interface = 7;

    pub fn clear_remote_interface(&mut self) {
        self.remote_interface.clear();
    }

    pub fn has_remote_interface(&self) -> bool {
        self.remote_interface.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remote_interface(&mut self, v: ::std::string::String) {
        self.remote_interface = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_remote_interface<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.remote_interface.is_none() {
            self.remote_interface.set_default();
        };
        self.remote_interface.as_mut().unwrap()
    }

    // Take field
    pub fn take_remote_interface(&mut self) -> ::std::string::String {
        self.remote_interface.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_remote_interface<'a>(&'a self) -> &'a str {
        match self.remote_interface.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // repeated int32 owned_port = 8;

    pub fn clear_owned_port(&mut self) {
        self.owned_port.clear();
    }

    // Param is passed by value, moved
    pub fn set_owned_port(&mut self, v: ::std::vec::Vec<i32>) {
        self.owned_port = v;
    }

    // Mutable pointer to the field.
    pub fn mut_owned_port<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<i32> {
        &mut self.owned_port
    }

    // Take field
    pub fn take_owned_port(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.owned_port, ::std::vec::Vec::new())
    }

    pub fn get_owned_port<'a>(&'a self) -> &'a [i32] {
        &self.owned_port
    }

    // repeated string storage_directories = 9;

    pub fn clear_storage_directories(&mut self) {
        self.storage_directories.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_directories(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.storage_directories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_storage_directories<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.storage_directories
    }

    // Take field
    pub fn take_storage_directories(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.storage_directories, ::protobuf::RepeatedField::new())
    }

    pub fn get_storage_directories<'a>(&'a self) -> &'a [::std::string::String] {
        &self.storage_directories
    }
}

impl ::protobuf::Message for CasterNodeConfig {
    fn is_initialized(&self) -> bool {
        if self.seed.is_none() {
            return false;
        };
        if self.remote_seed.is_none() {
            return false;
        };
        if self.peer_address.is_none() {
            return false;
        };
        if self.chatter_port.is_none() {
            return false;
        };
        if self.internal_interface.is_none() {
            return false;
        };
        if self.external_interface.is_none() {
            return false;
        };
        if self.remote_interface.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_bool());
                    self.seed = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_bool());
                    self.remote_seed = ::std::option::Option::Some(tmp);
                },
                3 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.peer_address));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int32());
                    self.chatter_port = ::std::option::Option::Some(tmp);
                },
                5 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.internal_interface));
                },
                6 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.external_interface));
                },
                7 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.remote_interface));
                },
                8 => {
                    try!(::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.owned_port));
                },
                9 => {
                    try!(::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.storage_directories));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.seed.is_some() {
            my_size += 2;
        };
        if self.remote_seed.is_some() {
            my_size += 2;
        };
        for value in self.peer_address.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.chatter_port.iter() {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.internal_interface.iter() {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        for value in self.external_interface.iter() {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        for value in self.remote_interface.iter() {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if !self.owned_port.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_size(8, &self.owned_port);
        };
        for value in self.storage_directories.iter() {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.seed {
            try!(os.write_bool(1, v));
        };
        if let Some(v) = self.remote_seed {
            try!(os.write_bool(2, v));
        };
        if let Some(v) = self.peer_address.as_ref() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.chatter_port {
            try!(os.write_int32(4, v));
        };
        if let Some(v) = self.internal_interface.as_ref() {
            try!(os.write_string(5, &v));
        };
        if let Some(v) = self.external_interface.as_ref() {
            try!(os.write_string(6, &v));
        };
        if let Some(v) = self.remote_interface.as_ref() {
            try!(os.write_string(7, &v));
        };
        if !self.owned_port.is_empty() {
            try!(os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited));
            // TODO: Data size is computed again, it should be cached
            try!(os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.owned_port)));
            for v in self.owned_port.iter() {
                try!(os.write_int32_no_tag(*v));
            };
        };
        for v in self.storage_directories.iter() {
            try!(os.write_string(9, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<CasterNodeConfig>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for CasterNodeConfig {
    fn new() -> CasterNodeConfig {
        CasterNodeConfig::new()
    }

    fn descriptor_static(_: ::std::option::Option<CasterNodeConfig>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "seed",
                    CasterNodeConfig::has_seed,
                    CasterNodeConfig::get_seed,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "remote_seed",
                    CasterNodeConfig::has_remote_seed,
                    CasterNodeConfig::get_remote_seed,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "peer_address",
                    CasterNodeConfig::has_peer_address,
                    CasterNodeConfig::get_peer_address,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "chatter_port",
                    CasterNodeConfig::has_chatter_port,
                    CasterNodeConfig::get_chatter_port,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "internal_interface",
                    CasterNodeConfig::has_internal_interface,
                    CasterNodeConfig::get_internal_interface,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "external_interface",
                    CasterNodeConfig::has_external_interface,
                    CasterNodeConfig::get_external_interface,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "remote_interface",
                    CasterNodeConfig::has_remote_interface,
                    CasterNodeConfig::get_remote_interface,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_i32_accessor(
                    "owned_port",
                    CasterNodeConfig::get_owned_port,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_string_accessor(
                    "storage_directories",
                    CasterNodeConfig::get_storage_directories,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CasterNodeConfig>(
                    "CasterNodeConfig",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for CasterNodeConfig {
    fn clear(&mut self) {
        self.clear_seed();
        self.clear_remote_seed();
        self.clear_peer_address();
        self.clear_chatter_port();
        self.clear_internal_interface();
        self.clear_external_interface();
        self.clear_remote_interface();
        self.clear_owned_port();
        self.clear_storage_directories();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for CasterNodeConfig {
    fn eq(&self, other: &CasterNodeConfig) -> bool {
        self.seed == other.seed &&
        self.remote_seed == other.remote_seed &&
        self.peer_address == other.peer_address &&
        self.chatter_port == other.chatter_port &&
        self.internal_interface == other.internal_interface &&
        self.external_interface == other.external_interface &&
        self.remote_interface == other.remote_interface &&
        self.owned_port == other.owned_port &&
        self.storage_directories == other.storage_directories &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for CasterNodeConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x16, 0x43, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
    0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
    0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9,
    0x01, 0x0a, 0x10, 0x43, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
    0x66, 0x69, 0x67, 0x12, 0x0c, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
    0x08, 0x12, 0x13, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64,
    0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x12, 0x25, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61,
    0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53,
    0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
    0x0c, 0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
    0x02, 0x28, 0x05, 0x12, 0x1a, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
    0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x12,
    0x1a, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
    0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x12, 0x18, 0x0a, 0x10, 0x72,
    0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
    0x07, 0x20, 0x02, 0x28, 0x09, 0x12, 0x16, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x70,
    0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x12, 0x1b, 0x0a,
    0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
    0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x4a, 0xf2, 0x0d, 0x0a, 0x06, 0x12,
    0x04, 0x00, 0x00, 0x26, 0x01, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x00, 0x07, 0x1d,
    0x0a, 0x70, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x04, 0x00, 0x26, 0x01, 0x1a, 0x64, 0x2f, 0x20,
    0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
    0x66, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x65, 0x6e, 0x63, 0x61,
    0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
    0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d,
    0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x0a, 0x2f, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74,
    0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64,
    0x65, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x04, 0x08, 0x18, 0x0a, 0x51,
    0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x07, 0x04, 0x1b, 0x1a, 0x44, 0x2f, 0x20, 0x49,
    0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73,
    0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x65, 0x64,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x07, 0x04, 0x0c, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x07, 0x0d, 0x11, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x07, 0x12, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x07, 0x19, 0x1a, 0x0a, 0x7d, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x01, 0x12, 0x03, 0x0b, 0x04, 0x22, 0x1a, 0x70, 0x2f, 0x20, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
    0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
    0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x61, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
    0x0a, 0x2f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64,
    0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20,
    0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01,
    0x04, 0x12, 0x03, 0x0b, 0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12,
    0x03, 0x0b, 0x0d, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x0b,
    0x12, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x0b, 0x20, 0x21,
    0x0a, 0x74, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x0f, 0x04, 0x2d, 0x1a, 0x67, 0x2f,
    0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x69,
    0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x62, 0x65,
    0x69, 0x6e, 0x67, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x3b, 0x20, 0x6f, 0x6e, 0x6c, 0x79,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68,
    0x61, 0x62, 0x6c, 0x65, 0x0a, 0x2f, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
    0x20, 0x75, 0x73, 0x65, 0x64, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x04, 0x12,
    0x03, 0x0f, 0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x0f,
    0x0d, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x0f, 0x1c, 0x28,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x0f, 0x2b, 0x2c, 0x0a, 0x78,
    0x0a, 0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x13, 0x04, 0x24, 0x1a, 0x6b, 0x2f, 0x20, 0x50,
    0x6f, 0x72, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6c, 0x69, 0x73, 0x74,
    0x65, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x70, 0x63, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
    0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
    0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x0a, 0x2f, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69,
    0x6e, 0x67, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e,
    0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03,
    0x04, 0x12, 0x03, 0x13, 0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x05, 0x12,
    0x03, 0x13, 0x0d, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x13,
    0x13, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x13, 0x22, 0x23,
    0x0a, 0x8c, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x17, 0x04, 0x2b, 0x1a, 0x7f,
    0x2f, 0x20, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
    0x61, 0x63, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x77, 0x69,
    0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
    0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x0a, 0x2f, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
    0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
    0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x04, 0x12, 0x03, 0x17, 0x04, 0x0c, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x04, 0x05, 0x12, 0x03, 0x17, 0x0d, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x17, 0x14, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x04, 0x03, 0x12, 0x03, 0x17, 0x29, 0x2a, 0x0a, 0x9d, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x05,
    0x12, 0x03, 0x1b, 0x04, 0x2b, 0x1a, 0x8f, 0x01, 0x2f, 0x20, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
    0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
    0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67,
    0x0a, 0x2f, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x73, 0x65,
    0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
    0x74, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65,
    0x64, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
    0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x04,
    0x12, 0x03, 0x1b, 0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x05, 0x12, 0x03,
    0x1b, 0x0d, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x1b, 0x14,
    0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x1b, 0x29, 0x2a, 0x0a,
    0x7a, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x06, 0x12, 0x03, 0x1f, 0x04, 0x29, 0x1a, 0x6d, 0x2f, 0x20,
    0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
    0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c,
    0x20, 0x75, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
    0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x0a, 0x2f, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x72, 0x65,
    0x6d, 0x6f, 0x74, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x06, 0x04, 0x12, 0x03, 0x1f, 0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x06, 0x05, 0x12, 0x03, 0x1f, 0x0d, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x01,
    0x12, 0x03, 0x1f, 0x14, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x03, 0x12, 0x03,
    0x1f, 0x27, 0x28, 0x0a, 0x58, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x07, 0x12, 0x03, 0x22, 0x04, 0x30,
    0x1a, 0x4b, 0x2f, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6f, 0x72, 0x74,
    0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65,
    0x20, 0x63, 0x61, 0x6e, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x63,
    0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x07, 0x04, 0x12, 0x03, 0x22, 0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x07, 0x05, 0x12, 0x03, 0x22, 0x0d, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x07, 0x01, 0x12, 0x03, 0x22, 0x13, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x03,
    0x12, 0x03, 0x22, 0x20, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x08, 0x12, 0x03,
    0x22, 0x22, 0x2f, 0x0a, 0x0f, 0x0a, 0x08, 0x04, 0x00, 0x02, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x12,
    0x03, 0x22, 0x23, 0x2e, 0x0a, 0x10, 0x0a, 0x09, 0x04, 0x00, 0x02, 0x07, 0x08, 0xe7, 0x07, 0x00,
    0x02, 0x12, 0x03, 0x22, 0x23, 0x29, 0x0a, 0x11, 0x0a, 0x0a, 0x04, 0x00, 0x02, 0x07, 0x08, 0xe7,
    0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x22, 0x23, 0x29, 0x0a, 0x12, 0x0a, 0x0b, 0x04, 0x00, 0x02,
    0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x22, 0x23, 0x29, 0x0a, 0x10, 0x0a,
    0x09, 0x04, 0x00, 0x02, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x03, 0x22, 0x2a, 0x2e, 0x0a,
    0x36, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x08, 0x12, 0x03, 0x25, 0x04, 0x2c, 0x1a, 0x29, 0x2f, 0x20,
    0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
    0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73,
    0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x04,
    0x12, 0x03, 0x25, 0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x05, 0x12, 0x03,
    0x25, 0x0d, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x01, 0x12, 0x03, 0x25, 0x14,
    0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x03, 0x12, 0x03, 0x25, 0x2a, 0x2b,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
